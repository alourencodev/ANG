
# Root CMakeFile

cmake_minimum_required(VERSION 3.22)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set correct output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)

foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

# Surpress Warnings
set(AGE_COMPILE_OPTIONS)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
	set(AGE_COMPILE_OPTIONS ${AGE_COMPILE_OPTIONS} -Wattributes)
endif ()

# Set build scheme macro based on cmake config
set (AGE_BUILD_CONFIG)
if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	set(AGE_BUILD_CONFIG AGE_DEBUG)
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
	set(AGE_BUILD_CONFIG AGE_RELEASE)
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "ReleaseWithDbgInfo")
	set(AGE_BUILD_CONFIG AGE_RELEASE_DBG_INFO)
endif()

project(ANG)

add_subdirectory(Vendor)
add_subdirectory(Core)
add_subdirectory(AGE)
add_subdirectory(ANG)

if (AGE_TESTS)
	add_subdirectory(Tests)
endif()
